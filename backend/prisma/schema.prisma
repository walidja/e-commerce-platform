// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  mobile    String  @unique
  password  String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastPasswordChangeAt DateTime @default(now())
  password_reset_tokens PasswordResetTokens[]
  remember_me_tokens RememberMeToken[]
  shop  Shop?
  cart Cart?
  @@map("users")
}

model PasswordResetTokens {
  id        String   @id @default(cuid())
  userId    String
  hashedToken String
  expiresAt DateTime
  createdAt DateTime @default(now())
  used Boolean @default(false)
  user      User @relation(fields: [userId], references: [id])
}

model RememberMeToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User @relation(fields: [userId], references: [id])

  @@map("remember_me_tokens")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Product[]
  @@map("categories")
}

model Shop {
  id        String   @id @default(cuid())
  name      String   @unique
  description String
  userId  String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Product[]
  user  User  @relation(fields: [userId], references: [id])
  @@map("shops")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  categoryId  String
  shopId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [categoryId], references: [id])
  shop        Shop     @relation(fields: [shopId], references: [id])
  productModels ProductModel[]
  @@map("products")
}

model ProductModel {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  stock       Int
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  cartItems   CartItem[]
  @@map("product_models")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String @unique
  totalCart Float @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productModelId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  productModel ProductModel @relation(fields: [productModelId], references: [id])
  @@map("cart_items")
}
